// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name GMI
import AVFoundation
import Foundation
@_exported import GMI
import IWS_Shared_Components
import LocalAuthentication
import Realm
import RealmSwift
import Security
import Swift
import SwiftUI
import UIKit
public enum RegistrationStatus {
  case pendingVerification
  case userVerified
  public static func == (a: GMI.RegistrationStatus, b: GMI.RegistrationStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol AccountServiceManagerProtocol {
  func register(profile: GMI.Profile, resendConfirmation: Swift.Bool, completion: @escaping (GMI.GMIResponse<GMI.RegistrationStatus>) -> ())
  func remove(profile: GMI.Profile, completion: @escaping (GMI.GMIResponse<Swift.Void>) -> ())
  func update(profile: GMI.Profile)
  func updatePush(token: Swift.String)
  var gmiVersion: Swift.String { get }
  var profiles: [GMI.Profile] { get }
}
@_hasMissingDesignatedInitializers public class AccountServiceManager : GMI.AccountServiceManagerProtocol {
  public convenience init()
  public var gmiVersion: Swift.String {
    get
  }
  public var profiles: [GMI.Profile] {
    get
  }
  public func update(profile: GMI.Profile)
  public func updatePush(token: Swift.String)
  public func remove(profile: GMI.Profile, completion: @escaping (GMI.GMIResponse<Swift.Void>) -> ())
  public func register(profile: GMI.Profile, resendConfirmation: Swift.Bool, completion: @escaping (GMI.GMIResponse<GMI.RegistrationStatus>) -> ())
  @objc deinit
}
public protocol InteractionManagerDelegate : AnyObject {
  func alertCompleted()
  func alertAccepted()
  func alertRejected()
  func enrollmentHidden()
  func enrollmentComplete()
}
public struct Profile : Swift.Codable {
  public var id: Swift.String?
  public var email: Swift.String
  public var name: Swift.String
  public var configuration: GMI.Configuration?
  public init(name: Swift.String, email: Swift.String, configuration: GMI.Configuration)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum GMIError : Swift.Error {
  case notFound
  case requestFailed
  case invalidParameters(_: Swift.String)
  case malformedJson
  case maxRetriesExceeded
  case messageExpired
  case other(Swift.Error?)
}
public enum GMIResponse<T> {
  case success(T)
  case error(GMI.GMIError)
}
public struct Enrollment {
  public var completed: Swift.Bool
  public var messageId: Swift.Int
  public var algCode: Swift.String?
  public var captureType: GMI.CaptureType?
  public var profile: GMI.Profile?
  public var hidden: Foundation.Date?
  public var skipped: Foundation.Date?
}
public enum CaptureType : Swift.String, Swift.CaseIterable {
  case pin
  case palm
  case face
  case voice
  case passphrase
  case device
  case yesno
  public var userFriendlyName: Swift.String {
    get
  }
  public var icon: UIKit.UIImage? {
    get
  }
  public static func < (left: GMI.CaptureType, right: GMI.CaptureType) -> Swift.Bool
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [GMI.CaptureType]
  public static var allCases: [GMI.CaptureType] {
    get
  }
}
public protocol MessagesServiceManagerProtocol {
  func setWorkItemsUnread(completion: @escaping () -> ())
  func renderNextWorkItemIfNeeded()
  func synchronizeWorkItems(completion: @escaping () -> ())
  func activeAlertsCountChanged(notifyBlock: @escaping (Swift.Int) -> ())
  func register(rootController: UIKit.UIViewController, delegate: GMI.InteractionManagerDelegate)
  func resetSkipped(for enroll: GMI.Enrollment)
  var activeAlertsCount: Swift.Int { get }
  var activeEnrollsCount: Swift.Int { get }
  var enrolls: [GMI.Enrollment] { get }
}
@_hasMissingDesignatedInitializers public class MessagesServiceManager : GMI.MessagesServiceManagerProtocol {
  public convenience init()
  public var activeAlertsCount: Swift.Int {
    get
  }
  public var activeEnrollsCount: Swift.Int {
    get
  }
  public var enrolls: [GMI.Enrollment] {
    get
  }
  public func resetSkipped(for enrollment: GMI.Enrollment)
  public func activeAlertsCountChanged(notifyBlock: @escaping (Swift.Int) -> ())
  public func register(rootController: UIKit.UIViewController, delegate: GMI.InteractionManagerDelegate)
  public func setWorkItemsUnread(completion: @escaping () -> ())
  public func renderNextWorkItemIfNeeded()
  public func synchronizeWorkItems(completion: @escaping () -> ())
  @objc deinit
}
public struct Configuration : Swift.Codable {
  public var presetTitle: Swift.String
  public var gmiServerUrl: Swift.String
  public var gmiClientSecret: Swift.String
  public var gmiClientId: Swift.String
  public var gmiUserManagerUrl: Swift.String
  public var defaultTenantCode: Swift.String
  public var applicationCode: Swift.String
  public init(presetTitle: Swift.String, serverUrl: Swift.String, clientSecret: Swift.String, clientID: Swift.String, userManagerUrl: Swift.String, defaultTenantCode: Swift.String, applicationCode: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
